File: shell.h
Functions:
- void handle_signal(int sig);
- void prompt(void);
- char *read_line(void);
- char **split_line(char *line);
- int execute(char **args);
- int launch(char **args);
- int builtin_cd(char **args);
- int builtin_help(char **args);
- int builtin_exit(char **args);
- int builtin_env(char **args);
- int is_builtin(char *command);
- int handle_builtin(char **args);
- void free_args(char **args);
- char *get_command_path(char *command);
- void environment_init(char **env);
- int set_env_var(char *name, char *value);
- int unset_env_var(char *name);
- int _atoi(char *str);
- void handle_end_of_file(char *line);

File: main.c
Functions:
- int main(int argc, char **argv, char **env);

File: prompt.c
Functions:
- void prompt(void);

File: read_line.c
Functions:
- char *read_line(void);

File: split_line.c
Functions:
- char **split_line(char *line);

File: execute.c
Functions:
- int execute(char **args);

File: launch.c
Functions:
- int launch(char **args);

File: builtins.c
Functions:
- int builtin_cd(char **args);
- int builtin_help(char **args);
- int builtin_exit(char **args);
- int builtin_env(char **args);
- int is_builtin(char *command);
- int handle_builtin(char **args);

File: env_functions.c
Functions:
- void environment_init(char **env);
- int set_env_var(char *name, char *value);
- int unset_env_var(char *name);

File: path_functions.c
Functions:
- char *get_command_path(char *command);

File: utility_functions.c
Functions:
- int _atoi(char *str);
- void handle_end_of_file(char *line);

File: signal_handler.c
Functions:
- void handle_signal(int sig);

File: AUTHORS
No functions, but a formatted list of contributors.

File: README.md
No functions, but contains project description.

Note: This list assumes that each file contains the functions related to its primary responsibility, and that the main.c file contains the entry point for the program. The actual organization may vary depending on the specific design and architecture of your shell program.

